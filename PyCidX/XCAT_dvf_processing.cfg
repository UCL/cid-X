#
# Configuration file for XCAT DVF-processing
#
# Usage: This file configures the python script XCATdvfProcessing.py. The path to this configuration file needs to be 
#        given to this script as an input parameter. 
# 
#  1) The DVF processing consists of three steps which can be switched on and off in the section [PROCESSING_STEPS].
#     Only the proecessing steps selected will be performed. The steps are described in further detail below ( 2) - 4) )
#  2) The pre-processing step as defined in section [PREPROCESSING]
#     2.1) An attenuation file generated by the XCAT simulator (.bin file format) is converted to the nifti image file 
#          format (.nii.gz file format)
#     2.2) Optionally a CT-like file is generated from the attenuation file and the corresponding coefficients
#     2.3) A sliding segmentation is created from a DVF text file generated by the XCAT simulator
#     2.4) A signed distance map is generated based on 2.3)
#  3) The batch-processing of the XCAT-generated deformation vector fields (DVFs) [BATCH_POSTPROCESSING]
#     3.1) Each DVF file will be split into sliding regions according to the segmentation in 2) 
#     3.2) An invertible DVF will be generated for each region and composed into a single DVF
#     Note: The gradient of the signed distance map (2.4) is required. If the defined output files do not exist
#           these will be generated automatically. The output directory for these gradient files is the output
#           directory of step 2), [PREPROCESSING].
#  4) Warping of the first XCAT image based on the generated DVFs
#     4.1) If no reference image is defined, the XCAT attenuation map of step 2.1) will be used
#     4.2) If a CT-like image was generated, lung intensities can be changed according to their volume change. 
#          To do this, set [BATCH_WARPING][scaleLungIntensity = 1], define the CT-like image as the reference
#          image, and select reasonable lung threhold values which are used to generate a lung mask.
#


[PROCESSING_STEPS]
doPreProcessing       = 1
doBatchPostProcessing = 0
doBatchWarping        = 0 


[PREPROCESSING]
xcatAtnFile       = Q:/Data/ICR/XCAT2019_10/phantom/phtm_atn_1.bin
xcatDVFFile       = Q:/Data/ICR/XCAT/2019_10/DVF/dvf_vec_frame1_to_frame2/dvf_vec_frame1_to_frame2.txt
outDir            = Q:/Data/ICR/XCAT2019_10/preProcessing/
outDistMapImgName = distMap.nii.gz
outXCATAtnImgName = phtm_atn_1.nii.gz
numVoxX           = 256
numVoxY           = 256
numVoxZ           = 281
spacingX          = 2.0
spacingY          = 2.0
spacingZ          = 2.0

# Optional, comment if not using
outXCATCTImgName           = phtm_HU_1.nii.gz  
numberOfLevelSetIterations = 7500
outLevelSetImgName         = levelSetOut.nii.gz
saveLevelSetImage          = 1


[BATCH_POSTPROCESSING]
xcatDVFFilePattern   = D:/debugData/xcat_intensityScaling/dvf_vec_frame1*.txt
outDir               = D:/debugData/xcat_intensityScaling/dvfNifti/
tmpDir               = D:/debugData/xcat_intensityScaling/tmpXCAT/
outDistMapDxImgName  = distMap_dx.nii.gz
outDistMapDyImgName  = distMap_dy.nii.gz
outDistMapDzImgName  = distMap_dz.nii.gz
corruptedFilesDir    = D:/debugData/xcat_intensityScaling/corruptedFiles/
numProcessorsDVFInv  = 4

# Optional, comment if not using
niftyRegBinDir       =  D:/development/niftyreg/cmicLab/install_release/bin/


[BATCH_WARPING]
warpedOutImgBaseName     = imgWarpedByDVF_
outDir                   = D:/debugData/xcat_intensityScaling/warpedByDVF/
dvfPostFix               = __dvf_dvfCor_Nto1.nii.gz

# Optional, comment if not using
scaleLungIntensity       = 1
referenceImgName         = D:/debugData/xcat_intensityScaling/preProcessing/phtm_HU_1.nii.gz
lungLowerThreshold       = -760
lungUpperThreshold       = -730
additionalResampleParams = -pad -1000.0

